import json
import random
import aiohttp
import logging
from typing import List, Any
from datetime import datetime
from aiogram import F, Router, Bot
from filters import IsUser, throttle
from aiogram.filters import StateFilter
from setting import Config, load_config
from db import SearchMovie, User, SearchHistory
from aiogram.exceptions import TelegramBadRequest
from aiogram.client.default import DefaultBotProperties
from states import FSMContext, default_state, User_state
from aiogram.types import CallbackQuery, ReplyKeyboardRemove, InputMediaPhoto, Message
from buttons import inline_buttons, buttons, InlineKeyboardBuilder, genres_menu, InlineKeyboardButton
from storage import (budget_low, budget_high, help_text, main_menu_button, profile_info, sorry_reg_user,
                     menu_search_desc, search_menu, search_name_desc, congrat_film_name_desc, genres_menu_list,
                     sorry_name_film, search_process_desc, genres_dict, genres_not_in_lst, sorry_genres_film,
                     rating_menu_desc, rate_menu, rate_dict, budget_menu_desc, rate_money_menu, genres_menu_desc,
                     year_menu_desc, year_film_menu, back_search_desc, sorry_server_desc, search_teams, hist_not_desc,
                     if_budget, hist_date_desc, see_movie_desc, random_menu, user_menu_desc, user_menu,
                     search_menu_desc)


# --------------------------------- CONFIGURATION ---------------------------------


user_stack_song = []

user_call_router = Router()

config: Config = load_config()

logger = logging.getLogger(__name__)

KINOPOISK_API_KEY = config.tg_kino.token

bot = Bot(token=config.tg_bot.token, default=DefaultBotProperties(parse_mode="HTML"))


# --------------------------------- COMMANDS ---------------------------------


# –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ —Å –Ω–∏–∑–∫–∏–º –±—é–¥–∂–µ—Ç–æ–º –∏–∑ –∫–æ–º–∞–Ω–¥—ã
@user_call_router.message(F.text == "/low", StateFilter(default_state))
@throttle(2)
async def low_budget_movie(message: Message) -> None:
    """
    –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∫ –ø–æ–∏—Å–∫—É –§–∏–ª—å–º–∞ / –°–µ—Ä–∏–∞–ª–∞ —Å –Ω–∏–∑–∫–∏–º –±—é–¥–∂–µ—Ç–æ–º —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É

    Parameters
    ----------
    message : Message
        –°–æ–æ–±—â–µ–Ω–∏–µ-–∫–æ–º–∞–Ω–¥–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

    Returns
    -------
    None
    """
    await pre_want_movie(message=message, category=budget_low, search_now=3, dl_msg=1)


# –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ —Å –≤—ã—Å–æ–∫–∏–º –±—é–¥–∂–µ—Ç–æ–º –∏–∑ –∫–æ–º–∞–Ω–¥—ã
@user_call_router.message(F.text == "/high", StateFilter(default_state))
@throttle(2)
async def high_budget_movie(message: Message) -> None:
    """
    –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∫ –ø–æ–∏—Å–∫—É –§–∏–ª—å–º–∞ / –°–µ—Ä–∏–∞–ª–∞ —Å –≤—ã—Å–æ–∫–∏–º –±—é–¥–∂–µ—Ç–æ–º —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É

    Parameters
    ----------
    message : Message
        –°–æ–æ–±—â–µ–Ω–∏–µ-–∫–æ–º–∞–Ω–¥–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

    Returns
    -------
    None
    """
    await pre_want_movie(message=message, category=budget_high, search_now=3, dl_msg=1)


# –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
@user_call_router.message(F.text == "/history", StateFilter(default_state))
@throttle(2)
async def history(message: Message) -> None:
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É

    Parameters
    ----------
    message : Message
        –°–æ–æ–±—â–µ–Ω–∏–µ-–∫–æ–º–∞–Ω–¥–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

    Returns
    -------
    None
    """
    await sending_photo(message=message, table_name="names", go_class=1, prev_text=message.text)


# –ü–æ–º–æ—â—å —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –±–æ—Ç–∞
@user_call_router.message(F.text == "/help", StateFilter(default_state))
@throttle(2)
async def help_user(message: Message) -> None:
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã—Å–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –±–æ—Ç–∞

    Parameters
    ----------
    message : Message
        –°–æ–æ–±—â–µ–Ω–∏–µ-–∫–æ–º–∞–Ω–¥–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

    Returns
    -------
    None
    """
    await message.answer(text=help_text, reply_markup=await inline_buttons(buttons_lst=main_menu_button))


# --------------------------------- PROFILE ---------------------------------


# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@user_call_router.callback_query(F.data == "üë§–ü—Ä–æ—Ñ–∏–ª—å", StateFilter(default_state))
@throttle(2)
async def get_user_data(callback: CallbackQuery) -> None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ –µ–≥–æ ID

    Parameters
    ----------
    callback : CallbackQuery
        –ö—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

    Raises
    ------
    TypeError
        –õ–æ–≤–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–Ω–æ–ø–∫–∞–º

    Returns
    -------
    None
    """
    user_id = callback.message.chat.id

    try:
        person = User.get(User.user_id == user_id)

        await callback.message.edit_text(text=profile_info.format(person.name, person.birthday, person.phone),
                                         reply_markup=await inline_buttons(buttons_lst=main_menu_button))

    except TypeError:
        await callback.message.edit_text(text=sorry_reg_user)


# --------------------------------- NEW ---------------------------------


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –§–∏–ª—å–º–∞ –∏–ª–∏ –°–µ—Ä–∏–∞–ª–∞
@user_call_router.callback_query(F.data == "–†–∞–Ω–¥–æ–º üé≤", StateFilter(default_state))
@throttle(2)
async def question_new(callback: CallbackQuery) -> None:
    """
    –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∫ –≤—ã–¥–∞—á–µ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞

    Parameters
    ----------
    callback : CallbackQuery
        –ö—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

    Returns
    -------
    None
    """
    await pre_want_movie(message=callback.message, search_now=6, msg_id=callback.message.message_id)


# --------------------------------- SEARCH ---------------------------------


# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø–æ–∏—Å–∫–∞
@user_call_router.callback_query(F.data == "üîç –ü–æ–∏—Å–∫", StateFilter(default_state))
@throttle(2)
async def movie_search(callback: CallbackQuery) -> None:
    """
    –ò–∑–º–µ–Ω—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –æ–±—â–µ–µ –º–µ–Ω—é –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø–æ–∏—Å–∫–∞

    Parameters
    ----------
    callback : CallbackQuery
        –ö—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

    Returns
    -------
    None
    """
    await callback.message.edit_text(text=menu_search_desc, reply_markup=await inline_buttons(buttons_lst=search_menu))


# –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∏—Å–∫–∞ –§–∏–ª—å–º–∞ / –°–µ—Ä–∏–∞–ª–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
@user_call_router.callback_query(F.data == "üîñ –ù–∞–∑–≤–∞–Ω–∏–µ", StateFilter(default_state))
@throttle(2)
async def movie_by_name_all(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ò–∑–º–µ–Ω—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –∑–∞–ø—Ä–æ—Å—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –§–∏–ª—å–º–∞ / –°–µ—Ä–∏–∞–ª–∞

    Parameters
    ----------
    callback : CallbackQuery
        –ö—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

    state : FSMContext
        –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns
    -------
    None
    """
    mess = await callback.message.edit_text(text=search_name_desc)

    await state.update_data(mess=mess.message_id)

    await state.set_state(state=User_state.fill_name_film)


# –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∑–∞–ø—Ä–æ—Å–∞ –∂–∞–Ω—Ä–∞ –§–∏–ª—å–º–∞ / –°–µ—Ä–∏–∞–ª–∞
@user_call_router.message(StateFilter(User_state.fill_name_film))
async def movie_by_name_go(message: Message, state: FSMContext) -> None:
    """
    –ü–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç –±–æ—Ç–∞ –∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è; —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –§–∏–ª—å–º–∞ /
    –°–µ—Ä–∏–∞–ª–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–µ—Ä–µ—Ö–æ–¥—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é, –∂–∞–Ω—Ä

    Parameters
    ----------
    message : Message
        –°—É—â–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

    state : FSMContext
        –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Raises
    ------
    TelegramBadRequest
        –õ–æ–≤–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è

    Returns
    -------
    None
    """
    user_id = message.chat.id

    data = await state.get_data()
    mess = int(data["mess"])

    try:
        await message.delete()

        await bot.delete_message(chat_id=user_id, message_id=mess)

    except TelegramBadRequest:
        pass

    if isinstance(film_name := message.text, str):
        mess = await message.answer(text=congrat_film_name_desc,
                                    reply_markup=await buttons(buttons_lst=genres_menu_list, width=2))

        await state.update_data(film_name=film_name)

        await state.update_data(mess=mess.message_id)

        await state.set_state(state=User_state.fill_genres_film)

    else:
        mess = await message.answer(text=sorry_name_film)

        await state.update_data(mess=mess.message_id)

        await state.set_state(state=User_state.fill_name_film)


# –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–º—É –ø–æ–∏—Å–∫—É –§–∏–ª—å–º–∞ / –°–µ—Ä–∏–∞–ª–∞
@user_call_router.message(StateFilter(User_state.fill_genres_film))
@throttle(2)
async def movie_by_name_genre_go(message: Message, state: FSMContext) -> None:
    """
    –ü–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç –±–æ—Ç–∞ –∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è; —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∂–∞–Ω—Ä –§–∏–ª—å–º–∞ /
    –°–µ—Ä–∏–∞–ª–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∫ –ø–æ–∏—Å–∫—É –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º

    Parameters
    ----------
    message : Message
        –°—É—â–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

    state : FSMContext
        –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Raises
    ------
    TelegramBadRequest
        –õ–æ–≤–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è

    Returns
    -------
    None
    """
    user_id = message.chat.id

    data = await state.get_data()
    mess = int(data["mess"])
    film_name = data["film_name"]

    try:
        await message.delete()

        await bot.delete_message(chat_id=user_id, message_id=mess)

    except TelegramBadRequest:
        pass

    if isinstance(film_genre := message.text, str):
        if film_genre in genres_menu_list:
            await state.clear()

            mess = await message.answer(text=search_process_desc)

            film_genre = genres_dict[film_genre]

            await pre_want_movie(message=message, category=[film_name, film_genre], search_now=5,
                                 msg_id=mess.message_id)

        else:
            mess = await message.answer(text=genres_not_in_lst,
                                        reply_markup=await buttons(buttons_lst=genres_menu_list, width=2))

            await state.update_data(mess=mess.message_id)

            await state.set_state(state=User_state.fill_genres_film)

    else:
        mess = await message.answer(text=sorry_genres_film)

        await state.update_data(mess=mess.message_id)

        await state.set_state(state=User_state.fill_genres_film)


# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞ –§–∏–ª—å–º–∞ / –°–µ—Ä–∏–∞–ª–∞ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
@user_call_router.callback_query(F.data == "–†–µ–π—Ç–∏–Ω–≥ üÜí", StateFilter(default_state))
@throttle(2)
async def movie_by_rating_all(callback: CallbackQuery) -> None:
    """
    –ò–∑–º–µ–Ω—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞ –§–∏–ª—å–º–∞ / –°–µ—Ä–∏–∞–ª–∞ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É

    Parameters
    ----------
    callback : CallbackQuery
        –ö—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

    Returns
    -------
    None
    """
    await callback.message.edit_text(text=rating_menu_desc,
                                     reply_markup=await inline_buttons(buttons_lst=rate_menu + ["üîô –ù–ê–ó–ê–î"]))


# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∫ –ø–æ–∏—Å–∫—É –§–∏–ª—å–º–∞ / –°–µ—Ä–∏–∞–ª–∞ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
@user_call_router.callback_query(F.data.in_(rate_dict), StateFilter(default_state))
@throttle(2)
async def movie_by_rating_one(callback: CallbackQuery) -> None:
    """
    –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∫ –ø–æ–∏—Å–∫—É –§–∏–ª—å–º–∞ / –°–µ—Ä–∏–∞–ª–∞ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É

    Parameters
    ----------
    callback : CallbackQuery
        –ö—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

    Returns
    -------
    None
    """
    rating_now = rate_dict[callback.data]

    await pre_want_movie(message=callback.message, category=rating_now, search_now=1,
                         msg_id=callback.message.message_id)


# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞ –§–∏–ª—å–º–∞ / –°–µ—Ä–∏–∞–ª–∞ –ø–æ –±—é–¥–∂–µ—Ç—É
@user_call_router.callback_query(F.data == "üí∞ –ë—é–¥–∂–µ—Ç", StateFilter(default_state))
@throttle(2)
async def movie_search_budget(callback: CallbackQuery) -> None:
    """
    –ò–∑–º–µ–Ω—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞ –§–∏–ª—å–º–∞ / –°–µ—Ä–∏–∞–ª–∞ –ø–æ –±—é–¥–∂–µ—Ç—É

    Parameters
    ----------
    callback : CallbackQuery
        –ö—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

    Returns
    -------
    None
    """
    await callback.message.edit_text(text=budget_menu_desc,
                                     reply_markup=await inline_buttons(buttons_lst=rate_money_menu + ["üîô –ù–ê–ó–ê–î"],
                                                                       buttons_per_row=1))


# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∫ –ø–æ–∏—Å–∫—É –§–∏–ª—å–º–∞ / –°–µ—Ä–∏–∞–ª–∞ —Å –≤—ã—Å–æ–∫–∏–º –±—é–¥–∂–µ—Ç–æ–º
@user_call_router.callback_query(F.data == "‚¨ÜÔ∏è –í—ã—Å–æ–∫–∏–π –±—é–¥–∂–µ—Ç", StateFilter(default_state))
@throttle(2)
async def movie_by_budget_high(callback: CallbackQuery) -> None:
    """
    –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∫ –ø–æ–∏—Å–∫—É –§–∏–ª—å–º–∞ / –°–µ—Ä–∏–∞–ª–∞ —Å –≤—ã—Å–æ–∫–∏–º –±—é–¥–∂–µ—Ç–æ–º

    Parameters
    ----------
    callback : CallbackQuery
        –ö—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

    Returns
    -------
    None
    """
    await pre_want_movie(message=callback.message, category=budget_high, search_now=3,
                         msg_id=callback.message.message_id)


# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∫ –ø–æ–∏—Å–∫—É –§–∏–ª—å–º–∞ / –°–µ—Ä–∏–∞–ª–∞ —Å –Ω–∏–∑–∫–∏–º –±—é–¥–∂–µ—Ç–æ–º
@user_call_router.callback_query(F.data == "–ù–∏–∑–∫–∏–π –±—é–¥–∂–µ—Ç ‚¨áÔ∏è", StateFilter(default_state))
@throttle(2)
async def movie_by_budget_low(callback: CallbackQuery) -> None:
    """
    –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∫ –ø–æ–∏—Å–∫—É –§–∏–ª—å–º–∞ / –°–µ—Ä–∏–∞–ª–∞ —Å –Ω–∏–∑–∫–∏–º –±—é–¥–∂–µ—Ç–æ–º

    Parameters
    ----------
    callback : CallbackQuery
        –ö—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

    Returns
    -------
    None
    """
    await pre_want_movie(message=callback.message, category=budget_low, search_now=3,
                         msg_id=callback.message.message_id)


# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞ –§–∏–ª—å–º–∞ / –°–µ—Ä–∏–∞–ª–∞ –ø–æ –∂–∞–Ω—Ä—É
@user_call_router.callback_query(F.data == "–ñ–∞–Ω—Ä üé≠", StateFilter(default_state))
@throttle(2)
async def movie_by_genres_all(callback: CallbackQuery) -> None:
    """
    –ò–∑–º–µ–Ω—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞ –§–∏–ª—å–º–∞ / –°–µ—Ä–∏–∞–ª–∞ –ø–æ –∂–∞–Ω—Ä—É

    Parameters
    ----------
    callback : CallbackQuery
        –ö—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

    Returns
    -------
    None
    """
    await callback.message.edit_text(text=genres_menu_desc, reply_markup=await genres_menu())


# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∫ –ø–æ–∏—Å–∫—É –§–∏–ª—å–º–∞ / –°–µ—Ä–∏–∞–ª–∞ –ø–æ –∂–∞–Ω—Ä—É
@user_call_router.callback_query(F.data.in_(genres_dict), StateFilter(default_state))
@throttle(2)
async def movie_by_genres_one(callback: CallbackQuery) -> None:
    """
    –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∫ –ø–æ–∏—Å–∫—É –§–∏–ª—å–º–∞ / –°–µ—Ä–∏–∞–ª–∞ –ø–æ –∂–∞–Ω—Ä—É

    Parameters
    ----------
    callback : CallbackQuery
        –ö—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

    Returns
    -------
    None
    """
    genres_now = genres_dict[callback.data]

    await pre_want_movie(message=callback.message, category=genres_now, search_now=2,
                         msg_id=callback.message.message_id)


# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞ –§–∏–ª—å–º–∞ / –°–µ—Ä–∏–∞–ª–∞ –ø–æ –≥–æ–¥—É –≤—ã–ø—É—Å–∫–∞
@user_call_router.callback_query(F.data == "üóìÔ∏è –ì–æ–¥", StateFilter(default_state))
@throttle(2)
async def movie_by_year_all(callback: CallbackQuery) -> None:
    """
    –ò–∑–º–µ–Ω—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞ –§–∏–ª—å–º–∞ / –°–µ—Ä–∏–∞–ª–∞ –ø–æ –≥–æ–¥—É –≤—ã–ø—É—Å–∫–∞

    Parameters
    ----------
    callback : CallbackQuery
        –ö—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

    Returns
    -------
    None
    """
    await callback.message.edit_text(text=year_menu_desc,
                                     reply_markup=await inline_buttons(buttons_lst=year_film_menu + ["üîô –ù–ê–ó–ê–î"],
                                                                       buttons_per_row=4))


# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∫ –ø–æ–∏—Å–∫—É –§–∏–ª—å–º–∞ / –°–µ—Ä–∏–∞–ª–∞ –ø–æ –≥–æ–¥—É –≤—ã–ø—É—Å–∫–∞
@user_call_router.callback_query(F.data.in_(year_film_menu), StateFilter(default_state))
@throttle(2)
async def movie_by_year_one(callback: CallbackQuery) -> None:
    """
    –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∫ –ø–æ–∏—Å–∫—É –§–∏–ª—å–º–∞ / –°–µ—Ä–∏–∞–ª–∞ –ø–æ –≥–æ–¥—É –≤—ã–ø—É—Å–∫–∞

    Parameters
    ----------
    callback : CallbackQuery
        –ö—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

    Returns
    -------
    None
    """
    year_film_date = callback.data

    await pre_want_movie(message=callback.message, category=year_film_date, search_now=4,
                         msg_id=callback.message.message_id)


# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫—Ä–∏—Ç–µ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –§–∏–ª—å–º–∞ / –°–µ—Ä–∏–∞–ª–∞
@user_call_router.callback_query(F.data == "üîô –ù–ê–ó–ê–î", StateFilter(default_state))
@throttle(2)
async def movie_search(callback: CallbackQuery) -> None:
    """
    –ò–∑–º–µ–Ω—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –æ–±—â–µ–µ –º–µ–Ω—é –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø–æ–∏—Å–∫–∞

    Parameters
    ----------
    callback : CallbackQuery
        –ö—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

    Returns
    -------
    None
    """
    await callback.message.edit_text(text=back_search_desc,
                                     reply_markup=await inline_buttons(buttons_lst=search_menu))


# --------------------------------- SEARCH ENGINE ---------------------------------


# –§—É–Ω–∫—Ü–∏—è, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
async def movie(cat: Any = "0", num: int = 0):
    """
    –ù–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º

    Parameters
    ----------
    cat : Any
        –û–±—ä–µ–∫—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ / —Å–µ—Ä–∏–∞–ª–æ–≤

    num : int
        –ß–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ (–≤ –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ–∏—Å–∫)

    Returns
    -------
    response
        –ö–∞—Ä—É—Ç–∏–Ω–∞-–æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å
    """
    page_now = random.randint(a=1, b=10)

    if num == 1:
        url = (f"https://api.kinopoisk.dev/v1.4/movie?page={page_now}&limit=25&selectFields=&rating.imdb={cat}"
               f"&selectFields=name&selectFields=description&selectFields=year&selectFields=genres"
               f"&selectFields=ageRating&selectFields=poster&selectFields=rating&notNullFields=name&"
               f"notNullFields=poster.url&notNullFields=genres.name")

    elif num == 2:
        url = (f"https://api.kinopoisk.dev/v1.4/movie?page={page_now}&limit=25&genres.name={cat}"
               f"&selectFields=name&selectFields=description&selectFields=year&selectFields=genres"
               f"&selectFields=ageRating&selectFields=poster&selectFields=rating&notNullFields=name&"
               f"notNullFields=poster.url&notNullFields=genres.name")

    elif num == 3:
        url = (f"https://api.kinopoisk.dev/v1.4/movie?page={page_now}&limit=25&selectFields=name&"
               f"selectFields=description&selectFields=rating&selectFields=year&selectFields=genres&"
               f"selectFields=ageRating&selectFields=poster&notNullFields=name&notNullFields=poster.url&"
               f"notNullFields=genres.name&selectFields=budget&notNullFields=budget.value&"
               f"budget.value={cat}")

    elif num == 4:
        url = (f"https://api.kinopoisk.dev/v1.4/movie?page={page_now}&limit=25&year={cat}"
               f"&selectFields=name&selectFields=description&selectFields=year&selectFields=genres"
               f"&selectFields=ageRating&selectFields=poster&selectFields=rating&notNullFields=name&"
               f"notNullFields=poster.url&notNullFields=genres.name")

    elif num == 5:
        url = (f"https://api.kinopoisk.dev/v1.4/movie/search?page=1&limit=1&query={cat[0]}&genres.name={cat[1]}&"
               f"notNullFields=name&notNullFields=poster.url&notNullFields=genres.name&selectFields=name&"
               f"selectFields=description&selectFields=rating&selectFields=year&selectFields=genres&"
               f"selectFields=ageRating&selectFields=poster")

    elif num == 6:
        url = ("https://api.kinopoisk.dev/v1.4/movie/random?notNullFields=name&notNullFields=genres.name&"
               "notNullFields=poster.url")

    else:
        url = (f"https://api.kinopoisk.dev/v1.4/movie?page={page_now}&limit=25&selectFields=name&"
               f"selectFields=description&selectFields=rating&selectFields=year&selectFields=genres&"
               f"selectFields=ageRating&selectFields=poster&notNullFields=name&notNullFields=poster.url&"
               f"notNullFields=genres.name")

    headers = {
        "accept": "application/json",
        "X-API-KEY": KINOPOISK_API_KEY
    }

    async with aiohttp.ClientSession() as session:
        async with session.get(url=url, headers=headers) as response:
            return await response.json()


# –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ –ø–æ–∏—Å–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
async def pre_want_movie(message: Message, category: Any = "0", search_now: int = 0,
                         dl_msg: int = 0, msg_id: int = 0, go_class: int = 0) -> None:
    """
    –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–∞—Ö –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

    Parameters
    ----------
    message : Message
        –°–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ª—É—á–∞–µ–º–æ–µ –∏–∑ –∫—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–Ω–æ–ø–∫–∏

    category : Any
        –û–±—ä–µ–∫—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ / —Å–µ—Ä–∏–∞–ª–æ–≤

    search_now : int
        –ß–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ (–≤ –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ–∏—Å–∫)

    dl_msg : int
        –ß–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ == 0

    msg_id : int
        –ß–∏—Å–ª–æ-–Ω–æ–º–µ—Ä –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ

    go_class : int
        –ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö

    Raises
    ------
    TelegramBadRequest
        –õ–æ–≤–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è

    Returns
    -------
    None
    """
    result = await movie(cat=category, num=search_now)

    if result.get("statusCode") is not None:
        if dl_msg == 0:
            await message.answer(text=sorry_server_desc,
                                 reply_markup=await inline_buttons(buttons_lst=search_menu))

        else:
            await message.edit_text(text=sorry_server_desc,
                                    reply_markup=await inline_buttons(buttons_lst=search_menu))

    else:
        if dl_msg == 0:
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)

            except TelegramBadRequest:
                pass

        else:
            pass

        user_id = message.chat.id
        team_now = search_teams[search_now]

        if team_now == "randoms":
            result_lst = [result]

        else:
            result_lst = result["docs"]

        time_now = datetime.now().replace(microsecond=0)
        result_all = json.dumps(result_lst, ensure_ascii=False)

        user = SearchMovie(user_id=user_id, search_go=result_all, search_team=team_now, search_time=time_now)
        user.save()

        if team_now == "names":
            movie_now = SearchHistory(user_id=user_id, search_go=result_all, search_team=team_now, search_time=time_now)
            movie_now.save()

        await sending_photo(message=message, table_name=team_now, prev_text=message.text, go_class=go_class)


# --------------------------------- HISTORY ---------------------------------


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –ö–∏–Ω–æ –∏ –°–µ—Ä–∏–∞–ª–æ–≤
@user_call_router.callback_query(F.data == "–ò—Å—Ç–æ—Ä–∏—è üóÑÔ∏è", StateFilter(default_state))
@throttle(2)
async def question_history(callback: CallbackQuery) -> None:
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Parameters
    ----------
    callback : CallbackQuery
        –ö—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

    Raises
    ------
    TelegramBadRequest
        –õ–æ–≤–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è

    Returns
    -------
    None
    """
    try:
        await callback.message.delete()

    except TelegramBadRequest:
        pass

    await sending_photo(message=callback.message, table_name="names", prev_text=callback.message.text, go_class=1)


# --------------------------------- PAGINATION ---------------------------------


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
@throttle(2)
async def sending_photo(message: Message, table_name: str, go_class: int, page_now: int = 1,
                        prev_text: str = None) -> None:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏ –∫–Ω–æ–ø–∫–∏

    Parameters
    ----------
    message : Message
        –ö—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–Ω–æ–ø–∫–∏

    table_name : str
        –ò–º—è —Ç–∞–±–ª–∏—Ü—ã –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–∞

    go_class : int
        –ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö

    page_now : int
        –°—Ç—Ä–∞–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    prev_text : str
        –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –µ—Å–ª–∏ –æ–Ω–æ –∏–º–µ–µ—Ç—Å—è –≤ –ë–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

    Returns
    -------
    None
    """
    user_id = message.chat.id

    buttons_photo = InlineKeyboardBuilder()

    now_list_film, how_many, time_search = await __get_total_pages(table_name=table_name, user_id=user_id,
                                                                   go_class=go_class)

    if how_many == 0:
        await message.answer(text=hist_not_desc, reply_markup=await inline_buttons(buttons_lst=main_menu_button))

    else:
        if how_many > 1:
            btn_1 = InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"prev_{go_class}_{table_name}_{page_now}")
            btn_2 = InlineKeyboardButton(text=f"{page_now}/{how_many}", callback_data=" ")
            btn_3 = InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"next_{go_class}_{table_name}_{page_now}")
            buttons_photo.row(btn_1, btn_2, btn_3)

            if go_class == 0:
                btn_5 = InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è ‚ÜòÔ∏è", callback_data="–í–µ—Ä–Ω—É—Ç—å—Å—è ‚ÜòÔ∏è")

            else:
                btn_5 = InlineKeyboardButton(text="–í—ã–π—Ç–∏ ‚èèÔ∏è", callback_data="–í—ã–π—Ç–∏ ‚èèÔ∏è")

            buttons_photo.row(btn_5)

        else:
            if table_name == "reg":
                buttons_photo = ReplyKeyboardRemove()

            else:
                if go_class == 0:
                    if table_name == "randoms":
                        btn_0 = InlineKeyboardButton(text="–†–∞–Ω–¥–æ–º üé≤", callback_data="–†–∞–Ω–¥–æ–º üé≤")
                        btn_1 = InlineKeyboardButton(text="–í—ã–π—Ç–∏ ‚èèÔ∏è", callback_data="–í—ã–π—Ç–∏ ‚èèÔ∏è")

                    else:
                        btn_0 = None
                        btn_1 = InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è ‚ÜòÔ∏è", callback_data=f"–í–µ—Ä–Ω—É—Ç—å—Å—è ‚ÜòÔ∏è")

                else:
                    btn_0 = None
                    btn_1 = InlineKeyboardButton(text="–í—ã–π—Ç–∏ ‚èèÔ∏è", callback_data="–í—ã–π—Ç–∏ ‚èèÔ∏è")

                if btn_0 is not None:
                    buttons_photo.row(btn_0, btn_1)

                else:
                    buttons_photo.row(btn_1)

        if buttons_photo == ReplyKeyboardRemove():
            keyboard = buttons_photo

        else:
            keyboard = buttons_photo.as_markup(resize_keyboard=True, one_time_keyboard=True)

        now_see_film = now_list_film[page_now - 1]

        genres_now = ''

        for j in range(len(now_see_film["genres"])):
            genres_now = genres_now + now_see_film["genres"][j]["name"] + "; "

        film_name = now_see_film["name"]
        film_year = "–ù–µ—Ç" if now_see_film["year"] is None else now_see_film["year"]
        film_desc = "–ù–µ—Ç" if now_see_film["description"] is None else now_see_film["description"][:100] + "..."
        film_rating = now_see_film["rating"]["imdb"]
        film_age = "–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–æ" if now_see_film["ageRating"] is None else now_see_film["ageRating"] + " +"
        poster = now_see_film["poster"]["previewUrl"]

        if table_name == "money":
            dop_desc = if_budget.format(now_see_film["budget"]["value"])

        elif table_name == "names":
            time_lst = time_search.split("_")
            dop_desc = hist_date_desc.format(time_lst[0], time_lst[1])

        else:
            dop_desc = ""

        desc = see_movie_desc.format(film_name, film_year, film_desc, film_rating, film_age, genres_now)
        desc += dop_desc

        if table_name == "reg":
            await bot.send_photo(chat_id=message.chat.id, photo=poster, caption=desc, protect_content=False,
                                 reply_markup=keyboard)

        else:
            if prev_text:
                await bot.send_photo(chat_id=message.chat.id, photo=poster, caption=desc, disable_notification=True,
                                     protect_content=False, reply_markup=keyboard)

            else:
                if table_name == "randoms":
                    try:
                        await bot.send_photo(chat_id=message.chat.id, photo=poster, caption=desc,
                                             disable_notification=True, protect_content=False,
                                             reply_markup=keyboard)

                    except TelegramBadRequest:
                        await message.answer(text=sorry_server_desc,
                                             reply_markup=await inline_buttons(buttons_lst=random_menu))

                else:
                    await bot.edit_message_media(chat_id=message.chat.id, message_id=message.message_id,
                                                 media=InputMediaPhoto(media=poster, caption=desc),
                                                 reply_markup=keyboard)


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–∏—Å–∫–∞
async def __get_total_pages(table_name: str, user_id: int, go_class: int) -> tuple[List, int, str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å–ª–æ–≤–∞—Ä–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å–º–æ–≤

    Parameters
    ----------
    table_name : str
        –ò–º—è —Ç–∞–±–ª–∏—Ü—ã, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å —Ñ–∏–ª—å–º–∞–º–∏

    user_id : int
        ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å —Ñ–∏–ª—å–º–∞–º–∏ –∏–∑ –ë–î

    go_class : int
        –ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö

    Returns
    -------
    now_list_film : List
        –°–ø–∏—Å–æ–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤

    how_many_film : int
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    """
    if go_class == 0:
        conn = SearchMovie.select().where((SearchMovie.search_team == table_name) & (SearchMovie.user_id == user_id))

    else:
        conn = SearchHistory.select().where((SearchHistory.search_team == table_name) &
                                            (SearchHistory.user_id == user_id))

    new_conn = conn.dicts()
    how_many = len(list(new_conn))

    if how_many == 0:
        now_list_film = ""
        how_many_film = how_many
        time_search = ""

    else:
        now_see_result = new_conn[how_many - 1]
        now_list_film = json.loads(now_see_result["search_go"])
        time_search = now_see_result["search_time"].strftime("%d-%m-%Y_%H:%M:%S")
        how_many_film = len(now_list_film)

    return now_list_film, how_many_film, time_search


# –§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤–ª–µ–≤–æ
@user_call_router.callback_query(F.data.startswith("prev_"), StateFilter(default_state))
@throttle(2)
async def prev_go(callback: CallbackQuery) -> None:
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–ª–µ—Å—Ç–Ω—É—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥

    Parameters
    ----------
    callback : CallbackQuery
        –ö—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

    Returns
    -------
    None
    """
    user_id = callback.message.chat.id

    page_now = int(callback.data.split("_")[-1]) - 1
    table_name = callback.data.split("_")[-2]
    go_class = int(callback.data.split("_")[-3])

    if page_now < 1:
        _, page_now, _ = await __get_total_pages(table_name=table_name, user_id=user_id, go_class=go_class)

    await sending_photo(message=callback.message, table_name=table_name, go_class=go_class, page_now=page_now)


# –§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤–ø—Ä–∞–≤–æ
@user_call_router.callback_query(F.data.startswith("next_"), StateFilter(default_state))
@throttle(2)
async def go_next(callback: CallbackQuery) -> None:
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–ª–µ—Å—Ç–Ω—É—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤–ø–µ—Ä—ë–¥

    Parameters
    ----------
    callback : CallbackQuery
        –ö—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

    Returns
    -------
    None
    """
    user_id = callback.message.chat.id

    page_now = int(callback.data.split("_")[-1]) + 1
    table_name = callback.data.split("_")[-2]
    go_class = int(callback.data.split("_")[-3])
    _, total_page, _ = await __get_total_pages(table_name=table_name, user_id=user_id, go_class=go_class)

    if page_now > total_page:
        page_now = 1

    await sending_photo(message=callback.message, table_name=table_name, go_class=go_class, page_now=page_now)


# --------------------------------- OTHER ---------------------------------


# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@user_call_router.callback_query(F.data == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", IsUser(), StateFilter(default_state))
@throttle(2)
async def go_main_menu(callback: CallbackQuery) -> None:
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

    Parameters
    ----------
    callback : CallbackQuery
        –ö—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

    Returns
    -------
    None
    """
    await callback.message.edit_text(text=user_menu_desc, reply_markup=await inline_buttons(buttons_lst=user_menu))


# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–∏—Å–∫–∞ –∏–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@user_call_router.callback_query(F.data == "–í–µ—Ä–Ω—É—Ç—å—Å—è ‚ÜòÔ∏è", IsUser(), StateFilter(default_state))
@throttle(2)
async def comeback_menu(callback: CallbackQuery) -> None:
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞ –∏–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

    Parameters
    ----------
    callback : CallbackQuery
        –ö—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

    Raises
    ------
    TelegramBadRequest
        –õ–æ–≤–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è

    Returns
    -------
    None
    """
    try:
        await callback.message.delete()

    except TelegramBadRequest:
        pass

    await callback.message.answer(text=search_menu_desc, disable_notification=True,
                                  reply_markup=await inline_buttons(buttons_lst=search_menu))


# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@user_call_router.callback_query(F.data == "–í—ã–π—Ç–∏ ‚èèÔ∏è", IsUser(), StateFilter(default_state))
@throttle(2)
async def comeback_menu_now(callback: CallbackQuery) -> None:
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

    Parameters
    ----------
    callback : CallbackQuery
        –ö—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

    Raises
    ------
    TelegramBadRequest
        –õ–æ–≤–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è

    Returns
    -------
    None
    """
    try:
        await callback.message.delete()

    except TelegramBadRequest:
        pass

    await callback.message.answer(text=user_menu_desc, disable_notification=True,
                                  reply_markup=await inline_buttons(buttons_lst=user_menu))
